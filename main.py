import sqlite3
import string
import os, time, random
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import *
from aiogram import types
from db import *
import db
from messages import *
from aiogram import types

from config import *
##########################################################################################################################

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())



@dp.message_handler(commands=["start"])
async def menu(message: types.Message, state: FSMContext):
	user_id_db = message.chat.id
	if user_id_db == 5559462803:
		await bot.send_message(message.chat.id, text=f'–ø–∞–ª—é –∫–∞–∫ –∞–¥–º–∏–Ω–∞')
	b1 = KeyboardButton('üîê –ü—Ä–æ—Ñ–∏–ª—å üë§')
	b2 = KeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô')
	b3 = KeyboardButton('üõ† –î—Ä—É–≥–æ–µ üõ†')

	b33 = KeyboardButton('/start')
	b4 = KeyboardButton('–ö–∞–∫ —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Ä–µ–Ω—Ç–∏—è)')
	b0 = KeyboardButton('ü§ô –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é ü§ô')

	buttons = ReplyKeyboardMarkup(resize_keyboard=True)
	buttons.add(b1).add(b2).add(b3)




###################################################### –ó–ê–ü–ò–°–¨ –í –ë–î######################################################

	dataq = message.date
	print(dataq)
	connect = sqlite3.connect('users.db')
	cursor = connect.cursor()
	cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
			id INTEGER,
			username TEXT,
			fname TEXT,
			starttime TEXT,
			money INTEGER
			)
			""")
	connect.commit()
	people_id = message.chat.id
	people_username = message.from_user.username
	people_fname = message.from_user.first_name
	stock_money = 0

	people_starttime = dataq
	cursor.execute(f"SELECT id FROM login_id WHERE id = '{people_id}'")
	if cursor.fetchone() is None:
		cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?);", (people_id,
																	people_username,
																	people_fname,
																	people_starttime,
																	stock_money))
		connect.commit()
	cursor.close()
###################################################### –ó–ê–ü–ò–°–¨ –í –ë–î######################################################

	_data = check_all_info(message.chat.id)
	await bot.send_message(chat_id=message.chat.id, text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.chat.username}')
	await bot.send_message(message.chat.id, text=f'üë§ –¢–≤–æ–π login:   `{_data[1]}`\n\n'
												 f'üë§ –¢–≤–æ–π id:   `{_data[0]}`\n\n'
												 f'üë§ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `{_data[3]}`\n\n\n'
												 f'üë§ –ë–∞–ª–∞–Ω—Å:   `{_data[4]}`', reply_markup=buttons,
						   parse_mode=types.ParseMode.MARKDOWN)
	await message.delete()


'''============================================–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô=================================================='''

@dp.message_handler(state='*', commands=['setstate'])
async def process_setstate_command(message: types.Message, index):
	argument = str(index)
	state = dp.current_state(user=message.from_user.id)
	if not argument:
		await state.reset_state()
		return await message.reply(MESSAGES['state_reset'])
	if (not argument.isdigit()) or (not int(argument) < len(TestStates.all())):
		return await message.reply(MESSAGES['invalid_key'].format(key=argument))

	await state.set_state(TestStates.all()[int(argument)])
	await message.reply(MESSAGES['popol'], reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_1)
async def first_test_state_case_met(message: types.Message):
	mes = message.text
	if mes.isdigit():
		argument = message.get_args()
		state = dp.current_state(user=message.from_user.id)
		a = int(mes)
		add_money_db(message.chat.id, a)
		await state.reset_state()
		return await message.reply(MESSAGES['add_money_success'])
	else:
		await bot.send_message(message.chat.id, text=f'–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á—ë–º –≤—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')

@dp.message_handler(state=TestStates.TEST_STATE_2)
async def first_test_state_case_met(message: types.Message):
	mes = message.text
	if mes.isdigit():
		argument = message.get_args()
		state = dp.current_state(user=message.from_user.id)
		a = int(mes)
		remove_money_db(message.chat.id, a)
		await state.reset_state()
		return await message.reply(MESSAGES['remove_money_success'])
	else:
		await bot.send_message(message.chat.id, text=f'–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á—ë–º –≤—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')

'''==================================================HANDLERS –°–û–û–ë–©–ï–ù–ò–ô=================================================='''


@dp.message_handler(text=['üè¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å üè¶'])
async def add_money(message: types.Message):
	_data = check_money(message.chat.id)

	await bot.send_message(message.chat.id, text=f'–í–∞—à –±–∞–ª–∞–Ω—Å: {_data[4]}')

@dp.message_handler(text=['üè¶ –ë–∞–ª–∞–Ω—Å 500 üè¶'])
async def add_money(message: types.Message):
	add_money2(message.chat.id)
	await bot.send_message(message.chat.id, text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!')

@dp.message_handler(text=['üè¶ –ë–∞–ª–∞–Ω—Å 0 üè¶'])
async def add_money(message: types.Message):
	remove_money(message.chat.id)
	await bot.send_message(message.chat.id, text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω!')

@dp.message_handler(text=['üè¶ –í–≤–µ—Å—Ç–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üè¶'])
async def add_money(message: types.Message):
	index = 1
	await process_setstate_command(message, index)

@dp.message_handler(text=['üè¶ –í–≤–µ—Å—Ç–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è üè¶'])
async def add_money(message: types.Message):
	index = 2
	await process_setstate_command(message, index)


@dp.message_handler(text=['üîê –ü—Ä–æ—Ñ–∏–ª—å üë§'])
async def profile_menu(message: types.Message):
	try:
		b1 = KeyboardButton('üè¶ –ë–∞–ª–∞–Ω—Å 500 üè¶')
		b2 = KeyboardButton('üè¶ –ë–∞–ª–∞–Ω—Å 0 üè¶')
		b3 = KeyboardButton('üè¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å üè¶')
		b4 = KeyboardButton('üè¶ –í–≤–µ—Å—Ç–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üè¶')
		b5 = KeyboardButton('üîô –ù–∞–∑–∞–¥ üîô')
		b6 = KeyboardButton('üè¶ –í–≤–µ—Å—Ç–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è üè¶')
		buttons = ReplyKeyboardMarkup(resize_keyboard=True)
		buttons.add(b3).add(b4).add(b6).add(b1,b2).add(b5)

		_data = check_all_info(message.chat.id)
		await bot.send_message(message.chat.id, text=f'üë§ –¢–≤–æ–π login:   `{_data[1]}`\n\n'
													 f'üë§ –¢–≤–æ–π id:   `{_data[0]}`\n\n'
													 f'üë§ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `{_data[3]}`\n\n\n'
													 f'üë§ –ë–∞–ª–∞–Ω—Å:   `{_data[4]}`', parse_mode=types.ParseMode.MARKDOWN,
													reply_markup=buttons)
	except:
		await bot.send_message(message.chat.id, text=f'–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')

@dp.message_handler(text=['‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'])
async def b2(message: types.Message):
	b3 = KeyboardButton('üìÅ –ß–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìÅ')
	b4 = KeyboardButton('üì§ –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–¥ üì§')
	b44 = KeyboardButton('üì• –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–¥ üì•')
	b5 = KeyboardButton('–ê–≤—Ç–æ—Ä')
	b6 = KeyboardButton('üîô –ù–∞–∑–∞–¥ üîô')
	buttons2 = ReplyKeyboardMarkup(resize_keyboard=True)
	buttons2.add(b3).add(b4).add(b44).add(b5, b6)
	await bot.send_message(chat_id=message.chat.id, text=f'–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:', reply_markup=buttons2)

@dp.message_handler(text=['üõ† –î—Ä—É–≥–æ–µ üõ†'])
async def b2(message: types.Message):
	b1 = KeyboardButton('ü§ô –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é ü§ô')
	b2 = KeyboardButton('–ö–∞–∫ —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Ä–µ–Ω—Ç–∏—è)')
	b3 = KeyboardButton('/start')
	b4 = KeyboardButton('üîô –ù–∞–∑–∞–¥ üîô')
	buttons2 = ReplyKeyboardMarkup(resize_keyboard=True)
	buttons2.add(b1).add(b2).add(b3).add(b4)
	await bot.send_message(chat_id=message.chat.id, text=f'–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:', reply_markup=buttons2)

@dp.message_handler(text=['ü§ô –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é ü§ô'])
async def inline_menu(message: types.Message):
	markup = InlineKeyboardMarkup()
	markup.add(InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))
	markup.add(InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings'))
	markup.add(InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_main'))
	photo = open('backrounds/brnd2.jpg', 'rb')
	await bot.send_photo(chat_id=message.chat.id, photo=photo,caption=f'–æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup)
	# await bot.send_message(chat_id=message.chat.id, text='--- –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ ---', reply_markup=markup, )

@dp.message_handler(text= ['üì§ –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–¥ üì§'])
async def delete(message):
	connect = sqlite3.connect('users.db')
	cursor = connect.cursor()
	people_id = message.chat.id
	cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
	connect.commit()
	connect.close()
	await bot.send_message(message.chat.id, text=f'–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')

@dp.message_handler(text= ['üì• –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–¥ üì•'])
async def create_again(message):
	dataq = message.date
	print(dataq)
	connect = sqlite3.connect('users.db')
	cursor = connect.cursor()
	cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
				id INTEGER,
				username TEXT,
				fname TEXT,
				starttime TEXT,
				money INTEGER
				)
				""")
	connect.commit()
	people_id = message.chat.id
	people_username = message.from_user.username
	people_fname = message.from_user.first_name

	people_starttime = dataq
	cursor.execute(f"SELECT id FROM login_id WHERE id = '{people_id}'")
	stock_money = 0
	if cursor.fetchone() is None:
		cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?);", (people_id,
																	people_username,
																	people_fname,
																	people_starttime,
																	stock_money))
		connect.commit()
	cursor.close()

	await bot.send_message(message.chat.id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')


@dp.message_handler(text=['üîô –ù–∞–∑–∞–¥ üîô'])
async def back_menu(message: types.Message):
	b1 = KeyboardButton('üîê –ü—Ä–æ—Ñ–∏–ª—å üë§')
	b2 = KeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô')
	b3 = KeyboardButton('üõ† –î—Ä—É–≥–æ–µ üõ†')

	buttons = ReplyKeyboardMarkup(resize_keyboard=True)
	buttons.add(b1).add(b2).add(b3)
	await bot.send_message(chat_id=message.chat.id, text=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=buttons)


@dp.message_handler(text=['üìÅ –ß–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìÅ'])
async def b2(message: types.Message):
	m = get_people_id()
	await bot.send_message(message.chat.id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {m}')

@dp.message_handler(text=['–ö–∞–∫ —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Ä–µ–Ω—Ç–∏—è)'])
async def b2(message: types.Message):
	await bot.send_message(message.chat.id, text=f'1. –ë–æ—Ç–∞ —Å–ª–æ–º–∞—Ç—å –Ω–∞ 100–ø—Ä–æ—Ü –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n'
												 f'2. –ó–∞—á–µ–º, –∞ –≥–ª–∞–≤–Ω–æ–µ –∑–∞—á–µ–º? —ç—Ç–æ –¥–µ–ª–∞—Ç—å?\n'
												 f'3. –£–¥–∞–ª—è–µ—à—å —Å–µ–±—è –∏–∑ –±–¥\n'
												 f'4. –ü—Ä–æ–±—É–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å -> profit\n'
												 f'–ì–∞–π–¥ —á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ')


# —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Ü–∏—Ñ—Ä—ã/–±—É–∫–≤—ã

# @dp.message_handler()
# async def add_money(message: types.Message):
# 	await bot.send_message(message.chat.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!')
# 	print(type(message.text))
# 	print(message.text)
# 	mes = message.text
# 	if mes.isdigit():
# 		await bot.send_message(message.chat.id, text=f'–Ø –ø–æ–Ω—è–ª. –ü–æ–ø–æ–ª–Ω—è—é –±–∞–ª–∞–Ω—Å')
# 		a = int(mes)
# 		test2(message.chat.id, a)
# 	else:
# 		await bot.send_message(message.chat.id, text=f'–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á—ë–º —Ç—ã')

#------------------------------------------HANDLERS –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–û–ö------------------------------------------------#


@dp.callback_query_handler(lambda c: c.data)
async def answer(call: types.CallbackQuery):
	if call.data == 'profile':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		markup = InlineKeyboardMarkup()
		markup.add(InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å ID', callback_data='get_id'))
		markup.add(InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –Ω–∏–∫', callback_data='get_nick'))
		markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_main'))
		photo = open('backrounds/brnd3.jpg', 'rb')
		await bot.send_photo(call.from_user.id, photo=photo, reply_markup=markup)
	elif call.data == 'get_id':
		await bot.send_message(call.from_user.id, text=f'–í–∞—à ID: {call.from_user.id}')
	elif call.data == 'get_nick':
		await bot.send_message(call.from_user.id, text=f'–í–∞—à –Ω–∏–∫: {call.from_user.username}')
	elif call.data == 'back_main':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		markup = InlineKeyboardMarkup()
		markup.add(InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))
		markup.add(InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings'))
		markup.add(InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_main'))
		photo = open('backrounds/brnd2.jpg', 'rb')
		await bot.send_photo(call.from_user.id, photo=photo, reply_markup=markup)
	elif call.data == 'settings':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		markup = InlineKeyboardMarkup()
		markup.add(InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥', callback_data='2'))
		markup.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–¥', callback_data='1'))
		markup.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–¥', callback_data='3'))
		markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_main'))
		photo = open('backrounds/brnd4.jpg', 'rb')
		await bot.send_photo(call.from_user.id, photo=photo, reply_markup=markup)
	elif call.data == 'close_main':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	elif call.data == '2':
		await bot.send_message(call.from_user.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥: {get_people_id()}')
	elif call.data == '1':
		connect = sqlite3.connect('users.db')
		cursor = connect.cursor()
		people_id = call.from_user.id
		cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
		connect.commit()
		connect.close()
		await bot.send_message(call.from_user.id, text=f'–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥: {get_people_id()}')
	elif call.data == '3':
		dataq = call.message.date
		print(dataq)
		connect = sqlite3.connect('users.db')
		cursor = connect.cursor()
		cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
						id INTEGER,
						username TEXT,
						fname TEXT,
						starttime TEXT,
						money INTEGER
						)
						""")
		connect.commit()
		people_id = call.from_user.id
		people_username = call.from_user.username
		people_fname = call.from_user.first_name
		stock_money = 0
		people_starttime = dataq
		cursor.execute(f"SELECT id FROM login_id WHERE id = '{people_id}'")
		if cursor.fetchone() is None:
			cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?);", (people_id,
																		people_username,
																		people_fname,
																		people_starttime,
																		stock_money))
			connect.commit()
		cursor.close()
		await bot.send_message(call.from_user.id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥: {get_people_id()}')

executor.start_polling(dp)